import streamlit as st # for making the web app
from langchain_google_genai import ChatGoogleGenerativeAI # using the Google Gemini LLM model for making the prompt
from langchain_core.prompts import PromptTemplate # for prompt engineering
from dotenv import load_dotenv # to load the api key to the program

# Loading the environment variables to the program
load_dotenv()

# Initializing the model 
model = ChatGoogleGenerativeAI(model='gemini-2.5-flash') 

#st.header("AI Tutor for Computer Science & Engineering") 
st.title("Welcome to AI Tutor 🎓")
st.subheader("Your Personal Learning Companion for CSE Subjects 🚀")
st.write("No need to make notes anymore! 📘 Just select your subject and start learning anytime.")



# the root class for selecting the topic of the subject
class Select_subject_name:
    
    # C-Programming function
    def C_programming(self):
        """
        This function lets the user pick a specific C-language topic.  
        Once a topic is selected, the LLM tailors its explanations, code-snippets and troubleshooting hints directly to that C concept, giving the learner exactly the help they need.
        """
        return st.selectbox("Select C topic", [
            "Introduction to C programming",
            "Keywords and Identifiers",
            "Data Types",
            "Operators and Expressions",
            "Input and Output",
            "Control Structures",
            "Arrays",
            "Pointers",
            "Functions",
            "Storage Classes",
            "Structures and Unions",
            "Dynamic Memory Allocation",
            "File Handling",
            "Preprocessor Directives",
            "Error Handling and Debugging",
            "Compiler designing"
        ])

    # Machine Learning funciton
    def machine_learning(self):
        """
        By choosing a particular ML topic (regression, clustering, boosting, etc.), the user receives LLM-curated explanations, math derivations and runnable code tuned to that exact machine-learning concept.
        """
        return st.selectbox("Select Machine Learning Topic",[
            'Introduction to Machine Learning',
            'Types of Machine Learning',
            'Supervised Learning',
            'Unsupervised Learning',
            'Reinforcement Learning',
            'Ensemble Learning',
            'Hyper-parameter Tuning',
    # ---------- Supervised Learning ----------
            "Linear Regression",
            "Ridge Regression",
            "Lasso Regression",
            "Polynomial Regression",
            "Logistic Regression",
            "Decision Tree",
            "Random Forest",
            "Gradient Boosting",
            "AdaBoost",
            "XGBoost",
            "LightGBM",
            "K-Nearest Neighbors (KNN)",
            "Support Vector Machine (SVM)",
            "Naive Bayes (Gaussian, Multinomial, Bernoulli)",
            "Extra Trees Classifier/Regressor",
            
            # ---------- Unsupervised Learning ----------
            "K-Means Clustering",
            "Hierarchical Clustering (Agglomerative, Divisive)",
            "DBSCAN",
            "Principal Component Analysis (PCA)",
            "Independent Component Analysis (ICA)",
            "t-SNE",
            # ---------- Reinforcement Learning ----------
            "Q-Learning",
            # ---------- Ensemble Methods ----------
            "Bagging",
            "Boosting",
            "Stacking",
            "Voting Classifier"
    ]
    )
        
    # deep learning function 
    def deep_learning(self):
        """ 
        This function in the project will help the use to choose the topics of the deep learning.
        and by the selecting of the subject selection the user can able to get desire answer generated by the LLM
        """
        return st.selectbox(
            "Select Deep-Learning Topic",
            [
                # ---------- Foundations ----------
                "Introduction to Deep Learning",
                "Neural Network Basics",
                "Activation Functions",
                "Loss Functions",
                "Optimization Algorithms (SGD, Adam, RMSprop)",
                "Weight Initialization",
                "Regularization (L1, L2, Dropout, Early-Stopping)",

                # ---------- Architectures ----------
                "Feed-Forward Neural Networks (MLP)",
                "Convolutional Neural Networks (CNN)",
                "Recurrent Neural Networks (RNN)",
                "Long Short-Term Memory (LSTM)",
                "Gated Recurrent Unit (GRU)",
                "Autoencoders",
                "Generative Adversarial Networks (GAN)",
                "Transformer",
                "Vision Transformer (ViT)",
                "ResNet",
                "LNet",
                "VGGNet",
                "DenseNet",
                "U-Net",
                "YOLO",

                # ---------- Transfer & Pre-trained Models ----------
                "Transfer Learning",
                "Pre-trained Image Models (VGG, Inception, EfficientNet)",
                "Pre-trained NLP Models (BERT, GPT, T5)",

                # ---------- Training Strategies ----------
                "Data Augmentation",
                "Gradient Clipping",
                "Batch Normalization",
                "Layer Normalization",

                # ---------- Frameworks & Tools ----------
                "TensorFlow",
                "Keras",
                "PyTorch",
                "PyTorch Lightning",
                "FastAI",
                "TensorBoard",
                # ---------- Advanced Topics ----------
                "Attention Mechanisms",
                "Self-Attention",
                "Multi-Head Attention",
                "Positional Encoding",
                "Neural Architecture Search (NAS)",
                "Self-Supervised Learning",
                "Graph Neural Networks (GNN)",
                "Diffusion Models",
                "Deep Reinforcement Learning (DQN, A3C, PPO)",
            ]
        )

    
    # C++ programming function
    def Cpp_Programming(self):
        """
        Selecting a C++ sub-topic triggers the LLM to generate focused guidance—be it OOP, STL, templates or memory management—so the user gets concise, relevant assistance rather than a generic C++ lecture.
        """
        return st.selectbox("Select C++ topic", [
            "Object-Oriented Concepts",
            "Classes and Objects",
            "Constructors and Destructors",
            "Inheritance",
            "Polymorphism",
            "Operator Overloading",
            "File Handling",
            "Templates and Exception Handling"
        ])
     
     # Digital_Electronics functions   
    def Digital_Electronics(self):
        """
        By choosing a digital-electronics topic, the user receives focused LLM-generated content—Boolean algebra, K-maps, flip-flops, counters, etc.—streamlined to the selected sub-field instead of a broad overview.
        """
        return st.selectbox("Select Digital Electronics topic", [
            "Number Systems and Codes",
            "Boolean Algebra",
            "Logic Gates",
            "Combinational Circuits",
            "Sequential Circuits",
            "Flip-Flops",
            "Registers and Counters",
            "Memory Devices"
        ])


    # Computer_Organization function 
    def Computer_Organization(self):
        """
        This function allows the learner to select a precise computer-architecture subject (e.g., pipelining, cache design, instruction sets).  
        The LLM then delivers in-depth explanations, diagrams and examples targeted to that exact area.
        """
        return st.selectbox("Select Computer Organization topic", [
            "Basic Structure of Computers",
            "Machine Instructions and Programs",
            "Basic Processing Unit",
            "Microprogrammed Control",
            "Memory System",
            "Cache and Virtual Memory",
            "Input / Output Organization",
            "Pipelining and RISC/CISC"
        ])

    # DSA Functoin 
    def Data_Structures(self):
        """
        Users pick the exact data-structure topic they want to master.  
        The LLM responds with tailored walk-throughs, complexity analyses and implementation code for the chosen structure (arrays, trees, graphs, etc.).
        """
        return st.selectbox("Select Data Structures topic", [
            # Basics
            "Introduction and Complexity",
            "Recursion and Its Applications",

            # Linear Data Structures
            "Arrays",
            "Linked Lists",
            "Stacks",
            "Queues",
            "Strings",
            "Pattern Matching",

            # Non-linear Data Structures
            "Binary Trees",
            "Binary Search Trees",
            "AVL Trees",
            "Heap",
            "B-Trees",
            "Tries",
            "Graphs",
            "Graph Traversals (BFS, DFS)",

            # Searching and Sorting
            "Linear Search",
            "Binary Search",
            "Interpolation Search",
            "Bubble Sort",
            "Selection Sort",
            "Insertion Sort",
            "Merge Sort",
            "Quick Sort",
            "Heap Sort",
            "Radix Sort",

            # Advanced DS
            "Hashing",
            "Hash Tables",
            "Disjoint Sets (Union-Find)",
            "Priority Queues",

            # Applications
            "Greedy Algorithms",
            "Dynamic Programming",
            "Backtracking",
            "Graph Algorithms - Dijkstra",
            "Graph Algorithms - Kruskal",
            "Graph Algorithms - Prim",
            "Graph Algorithms - Floyd-Warshall",
            "Graph Algorithms - Bellman-Ford",

            # Miscellaneous
            "Memory Management",
            "Garbage Collection",
            "Amortized Analysis"
        ])

    def Discrete_Mathematics(self):
        """
        This function covers the full syllabus including sets, logic, relations, 
        functions, combinatorics, graph theory, algebraic structures, 
        and probability relevant for Computer Science students.
        """
        return st.selectbox("Select Discrete Mathematics topic", [
            # Basics
            "Introduction to Discrete Mathematics",
            "Fundamental Concepts",
            "Applications in Computer Science",

            # Logic & Proofs
            "Propositional Logic",
            "Logical Connectives",
            "Truth Tables",
            "Predicate Logic",
            "Quantifiers (Universal, Existential)",
            "Logical Equivalences",
            "Rules of Inference",
            "Methods of Proof (Direct, Indirect, Contradiction, Contrapositive)",
            
            # Sets, Relations & Functions
            "Sets and Set Operations",
            "Venn Diagrams",
            "Relations and Properties (Reflexive, Symmetric, Transitive)",
            "Equivalence Relations",
            "Partial Orders",
            "Functions (One-to-One, Onto, Bijective)",
            "Composition of Functions",
            "Inverse Functions",

            # Algebraic Structures
            "Groups, Semigroups, Monoids",
            "Rings and Fields",
            "Boolean Algebra",
            "Lattices",

            # Combinatorics
            "Counting Principles",
            "Permutations and Combinations",
            "Pigeonhole Principle",
            "Inclusion-Exclusion Principle",
            "Recurrence Relations",
            "Generating Functions",

            # Graph Theory
            "Graphs and Their Representations (Adjacency, Incidence Matrix)",
            "Types of Graphs (Simple, Directed, Weighted, Bipartite)",
            "Graph Traversals (DFS, BFS)",
            "Connectivity and Components",
            "Euler and Hamiltonian Paths",
            "Shortest Path Algorithms (Dijkstra, Floyd-Warshall)",
            "Graph Coloring",
            "Planar Graphs and Trees",

            # Probability & Randomness
            "Basic Probability Concepts",
            "Conditional Probability",
            "Bayes Theorem",
            "Random Variables",
            "Expected Value and Variance",

            # Advanced Topics
            "Relations with Matrices",
            "Recursion and Recurrence",
            "Discrete Probability Distributions",
            "Applications in Algorithms and Computer Science"
        ])

    def Numerical_Methods(self):
        """
        This function covers core Numerical Methods used in engineering and 
        computer science including solutions of equations, interpolation, 
        numerical differentiation and integration, and numerical solutions 
        of differential equations."""
        
        return st.selectbox("Select Numerical Methods topic", [
            # Basics
            "Introduction to Numerical Methods",
            "Errors in Numerical Computation (Round-off, Truncation)",
            "Significant Figures and Accuracy",

            # Solutions of Equations
            "Bisection Method",
            "False Position (Regula Falsi) Method",
            "Newton-Raphson Method",
            "Secant Method",
            "Fixed Point Iteration Method",

            # Interpolation
            "Introduction to Interpolation",
            "Lagrange Interpolation",
            "Newton’s Divided Difference Method",
            "Forward and Backward Difference Interpolation",
            "Spline Interpolation (Linear, Quadratic, Cubic)",

            # Numerical Differentiation
            "Forward Difference Derivative",
            "Backward Difference Derivative",
            "Central Difference Derivative",
            "Higher-Order Derivatives",

            # Numerical Integration
            "Trapezoidal Rule",
            "Simpson’s 1/3 Rule",
            "Simpson’s 3/8 Rule",
            "Gaussian Quadrature",
            "Romberg Integration",

            # Numerical Solutions of Linear Systems
            "Gauss Elimination Method",
            "Gauss-Jordan Method",
            "LU Decomposition",
            "Jacobi Iteration Method",
            "Gauss-Seidel Iteration Method",
            "Convergence Criteria",

            # Numerical Solutions of Nonlinear Systems
            "Newton’s Method for Nonlinear Systems",
            "Fixed Point Iteration for Systems",

            # Numerical Solutions of Differential Equations
            "Taylor Series Method",
            "Euler’s Method",
            "Modified Euler Method",
            "Runge-Kutta Methods (2nd & 4th Order)",
            "Multistep Methods (Adams-Bashforth, Adams-Moulton)",

            # Advanced Topics
            "Numerical Solution of Partial Differential Equations",
            "Finite Difference Method",
            "Stability and Convergence of Numerical Methods",
            "Applications in Engineering and Computer Science"
        ])


    def Operating_System(self):
        """
        With this selector, the learner drills down to a single OS concept (scheduling, memory management, file systems, etc.) and receives LLM-generated explanations and examples crafted specifically for that concept.
        """        
        return st.selectbox("Select OS topic", [
            # Basics
            "Introduction to Operating Systems",
            "System Structures",
            "Operating System Services",
            "System Calls",
            "Types of Operating Systems (Batch, Time-Sharing, Distributed, Real-Time)",

            # Process Management
            "Processes",
            "Process Scheduling",
            "Operations on Processes",
            "Interprocess Communication (IPC)",
            "Threads",
            "Multithreading Models",

            # CPU Scheduling
            "CPU Scheduling Basics",
            "Scheduling Criteria",
            "Scheduling Algorithms - FCFS",
            "Scheduling Algorithms - SJF",
            "Scheduling Algorithms - Priority",
            "Scheduling Algorithms - Round Robin",
            "Scheduling Algorithms - Multilevel Queue",
            "Scheduling Algorithms - Multilevel Feedback Queue",


            # Deadlocks
            "Deadlock Characterization",
            "Deadlock Prevention",
            "Deadlock Avoidance",
            "Deadlock Detection",
            "Deadlock Recovery",

            # Memory Management
            "Memory Management Basics",
            "Contiguous Memory Allocation",
            "Paging",
            "Segmentation",
            "Virtual Memory",
            "Demand Paging",
            "Page Replacement Algorithms (FIFO, LRU, Optimal)",
            "Thrashing",

            # Storage Management
            "File System Interface",
            "File System Implementation",
            "Directory Structure",
            "Allocation Methods (Contiguous, Linked, Indexed)",
            "Free-Space Management",

            # I/O Systems
            "I/O Hardware",
            "Application I/O Interface",
            "Kernel I/O Subsystem",
            "Disk Scheduling",
            "Disk Management",
            "Swap-Space Management",

        ])


    def DBMS(self):
        """
        Picking a DBMS topic (normalization, SQL tuning, transactions, etc.) prompts the LLM to return targeted insights, queries and best-practice tips aligned to the precise database issue at hand.
        """        
        return st.selectbox("Select DBMS topic", [
            # Basics
            "Introduction to DBMS",
            "Database System Architecture",
            "Database Users and Administrators",
            "Database Languages (DDL, DML, DCL, TCL)",

            # Data Models
            "Data Models Overview",
            "Entity-Relationship (ER) Model",
            "Enhanced ER Model (EER)",
            "Relational Model",
            "Relational Algebra",
            "Relational Calculus",

            # SQL
            "Introduction to SQL",
            "DDL Commands",
            "DML Commands",
            "DCL Commands",
            "TCL Commands",
            "Basic SQL Queries",
            "Joins (Inner, Outer, Cross, Self)",
            "Nested Queries",
            "Views",
            "Indexes",
            "Stored Procedures and Functions",
            "Triggers",
            "Cursors",

            # Database Design
            "Functional Dependencies",
            "Normalization - 1NF",
            "Normalization - 2NF",
            "Normalization - 3NF",
            "BCNF",
            "4NF and 5NF",
            "Denormalization",

            # Transaction Management
            "Transactions and ACID Properties",
            "Transaction States",
            "Schedules (Serial, Non-Serial)",
            "Conflict and View Serializability",

            # Concurrency Control
            "Concurrency Control Basics",
            "Lock-Based Protocols",
            "Timestamp-Based Protocols",
            "Multiversion Concurrency Control",
            "Deadlocks in Concurrency",

            # Advanced Topics
            "Data Warehousing and Data Mining"
        ])


    def Software_Engineering(self):
        """
        This function creates a dropdown (selectbox) in Streamlit 
        for selecting Software Engineering topics.
        
        It covers the full range of Software Engineering syllabus,
        including Software Development Life Cycle (SDLC), process 
        models, requirement analysis, design, coding, testing, 
        project management, risk handling, and maintenance.
        """
        return st.selectbox("Select Software Engineering topic", [
            # Basics
            "Introduction to Software Engineering",
            "Software Development Life Cycle (SDLC)",

            # Process Models
            "Waterfall Model",
            "Iterative Model",
            "Spiral Model",
            "V-Model",
            "Agile Model",
            "RAD Model",
            "Incremental Model",
            "Prototyping Model",

            # Requirement Engineering
            "Requirement Analysis",
            "Requirement Elicitation",
            "Requirement Specification (SRS)",
            "Requirement Validation",

            # Software Design
            "Software Design Concepts",
            "Architectural Design",
            "Cohesion and Coupling",
            "Function-Oriented Design (DFD, Structured Charts)",
            "Object-Oriented Design (UML, Class Diagrams, Use Cases)",
            "User Interface Design",

            # Coding & Testing
            "Unit Testing",
            "Integration Testing",
            "System Testing",
            "Acceptance Testing",
            "Black Box Testing",
            "White Box Testing",
            "Software Testing Tools (JUnit, Selenium, etc.)",

            # Software Quality
            "Software Quality Assurance (SQA)",
            "Software Metrics",
            # Software Project Management
            "Project Planning",
            "Effort Estimation (COCOMO, Function Point)",
            "Risk Management",
            "Team Management",

            # Maintenance & Evolution
            "Software Maintenance",
            "Legacy Systems and Re-engineering"
        ])


    def Computer_Networks(self):
        """
        This function creates a dropdown (selectbox) in Streamlit 
        for selecting Computer Networks topics.
        
        It covers the complete syllabus of Networking including 
        fundamentals, OSI & TCP/IP layers, switching, error control, 
        routing, transport protocols, and application layer protocols.
        """
        return st.selectbox("Select Networking topic", [
            # Basics
            "Introduction to Data Communication",
            "Network Topologies",
            "Types of Networks (LAN, MAN, WAN, PAN)",
            "OSI Reference Model",
            "TCP/IP Reference Model",
            "Network Devices (Hub, Switch, Router, Gateway, Bridge)",

            # Physical Layer
            "Transmission Media (Guided & Unguided)",
            "Encoding and Modulation",
            "Multiplexing (FDM, TDM, WDM)",
            "Circuit Switching",
            "Packet Switching",
            "Message Switching",

            # Data Link Layer
            "Error Detection (Parity, CRC, Checksum)",
            "Error Correction (Hamming Code)",
            "Flow Control (Stop-and-Wait, Sliding Window)",
            "Data Link Protocols (HDLC, PPP, ARQ)",
            "MAC Protocols (ALOHA, CSMA, CSMA/CD, CSMA/CA)",

            # Network Layer
            "IP Addressing (IPv4, IPv6)",
            "Subnetting and Supernetting",
            "Routing Algorithms (Distance Vector, Link State, DVR, LSR)",
            "Unicast, Multicast, Broadcast Routing",
            "Congestion Control",
            "ARP, RARP, ICMP",

            # Transport Layer
            "Transport Layer Services",
            "UDP",
            "TCP",
            "TCP Flow Control",
            "TCP Congestion Control",
            "Quality of Service (QoS)",

            # Application Layer
            "DNS",
            "HTTP / HTTPS",
            "FTP",
            "SMTP and Email Protocols",
            "Telnet and SSH",
            "SNMP",
            "Multimedia Networking (VoIP, Streaming)",

            # Network Security
            "Cryptography Basics",
            "Symmetric and Asymmetric Encryption",
            "Firewalls",
            "Intrusion Detection Systems (IDS)",
            "VPN",
            "Secure Socket Layer (SSL) and TLS",

            # Advanced Topics
            "Mobile and Wireless Networks",
            "Ad-Hoc Networks",
            "Sensor Networks",
            "Software Defined Networking (SDN)",
            "Cloud Networking",
            "Internet of Things (IoT)"
        ])


    def Web_Technology(self):
        return st.selectbox("Select Web Tech topic", [
            "HTML Basics",
            "CSS Styling",
            "JavaScript Fundamentals",
            "DOM Manipulation",
            "Forms and Validations",
            "PHP Basics",
            "Database Connectivity with PHP",
            "Web Security Basics"
        ])

    def Java_Programming(self):
        """
        This function creates a dropdown (selectbox) in Streamlit 
        for selecting Java Programming topics.
        
        It covers core Java concepts including basics, OOP principles, 
        exception handling, multithreading, file handling, networking, 
        collections, JDBC, and advanced features.
        """
        return st.selectbox("Select Java topic", [
            # Basics
            "Introduction to Java",
            "History and Features of Java",
            "Java Architecture and JVM",
            "Java Development Kit (JDK) and JRE",
            "Basic Syntax, Data Types, and Variables",
            "Operators and Expressions",
            "Control Statements (if, switch, loops)",

            # OOP Concepts
            "Classes and Objects",
            "Constructors",
            "this and super Keywords",
            "Inheritance",
            "Polymorphism (Overloading and Overriding)",
            "Abstraction",
            "Encapsulation",
            "Interfaces",
            "Packages",

            # Exception Handling
            "Introduction to Exceptions",
            "try, catch, finally",
            "throw and throws",
            "User-Defined Exceptions",

            # Strings
            "String Class",
            "StringBuffer and StringBuilder",
            "Wrapper Classes",

            # Arrays and Collections
            "Arrays and Command-Line Arguments",
            "ArrayList, LinkedList",
            "HashSet, TreeSet",
            "HashMap, TreeMap",
            "Collections Framework and Utility Classes",

            # Multithreading
            "Thread Lifecycle",
            "Creating Threads (Thread class, Runnable)",
            "Thread Synchronization",
            "Inter-Thread Communication",
            "Deadlock in Threads",

            # File Handling & I/O
            "Java I/O Streams",
            "FileReader and FileWriter",
            "BufferedReader and BufferedWriter",
            "Serialization and Deserialization",

            # JDBC (Java Database Connectivity)
            "JDBC Introduction",
            "JDBC Drivers",
            "Establishing Database Connection",
            "Executing Queries (Statement, PreparedStatement, CallableStatement)",
            "ResultSet and Metadata",

            # Advanced Topics
            "Generics in Java",
            "Annotations",
            "Lambda Expressions",
            "Streams API",
            "Java 8 Features",
            "Java 9–17 Features Overview"
        ])


    def Artificial_Intelligence(self):
        """
        Users pick an AI sub-field (search algorithms, knowledge representation, NLP, robotics).  
        The LLM then generates targeted theory, algorithms and code examples specific to that AI domain.
        """
        return st.selectbox("Select AI topic", [
            "Introduction to AI",
            "Search Techniques",
            "Knowledge Representation",
            "Reasoning and Inference",
            "Expert Systems",
            "Natural Language Processing",
            "Machine Learning Basics",
            "AI Applications"
        ])

# ---------- Inheriting the class ----------
class Subject_selection(Select_subject_name):
    """ 
    This function will ask to the user to select the desire subject name for making notes
    and it will also help for customizing the topic to the next selectable subject.  
    """
    def Subject_selection_function(self):
        subject_name = st.selectbox("Select your subject name", [
            "Programming in C",
            "Digital Electronics",
            "Computer Organization",
            "Data Structures",
            "Discrete Mathematics",
            "Numerical Methods",
            "C++ Programming",
            "Operating System",
            "Database Management System (DBMS)",
            "Software Engineering",
            "Computer Networks",
            "Web Technology",
            "Java Programming",
            "Artificial Intelligence",
            "Machine Learning"
        ])

        # Map subjects to methods
        topic_name = None
        if subject_name == "Programming in C":
            topic_name = self.C_programming()
        elif subject_name == "Digital Electronics":
            topic_name = self.Digital_Electronics()
        elif subject_name == "Computer Organization":
            topic_name = self.Computer_Organization()
        elif subject_name == "Data Structures":
            topic_name = self.Data_Structures()
        elif subject_name == "C++ Programming":
            topic_name = self.Cpp_Programming()
        elif subject_name == "Operating System":
            topic_name = self.Operating_System()
        elif subject_name == "Database Management System (DBMS)":
            topic_name = self.DBMS()
        elif subject_name == "Software Engineering":
            topic_name = self.Software_Engineering()
        elif subject_name == "Computer Networks":
            topic_name = self.Computer_Networks()
        elif subject_name == "Web Technology":
            topic_name = self.Web_Technology()
        elif subject_name == "Java Programming":
            topic_name = self.Java_Programming()
        elif subject_name == "Artificial Intelligence":
            topic_name = self.Artificial_Intelligence()
        elif subject_name == "Machine Learning":
            topic_name = self.machine_learning()
        elif subject_name == "Discrete Mathematics":
            topic_name = self.Discrete_Mathematics()
        elif subject_name == "Numerical Methods":
            topic_name = self.Numerical_Methods()


        # Explanation style & length
        explanation_style = st.selectbox(
                "Choose Explanation Style:", 
                ["Simple","Theory","Math","Code", "Theory with Code","Theory with math","Math with code", "Code Heavy","Math Heavy","Math, Theory with Code"])
        explanation_length = st.selectbox("Choose Explanation Length:", ["Short", "Medium", "Long"])

        # Generate AI explanation
        if topic_name and st.button("Generate Notes"):
            template_string = """
            Explain the topic '{topic}' from subject '{subject}' with the following style and length:
            Explanation Style: {style}
            Explanation Length: {length}
            Include relevant formulas, examples, and code snippets if needed.
            """
            prompt_template = PromptTemplate(
                input_variables=["subject", "topic", "style", "length"],
                template=template_string
            )

            final_prompt = prompt_template.invoke({
                "subject": subject_name,
                "topic": topic_name,
                "style": explanation_style,
                "length": explanation_length
            })

            with st.spinner("Generating Notes..."):
                result = model.invoke(final_prompt)

            st.write(result.content)
            st.markdown("---")
            st.markdown(
    "✨ Created for CSE Students | 📧 Contact: subhasishjena8280@gmail.com<br>"
    "🌐 Follow us on <a href='https://github.com/subhasish20' target='_blank'>🐙 GitHub</a> | "
    "<a href='https://www.linkedin.com/in/jena-subhasish-290702270' target='_blank'>💼 LinkedIn</a> 🔗",
    unsafe_allow_html=True
)




# --------- Run the app ---------
app = Subject_selection()
app.Subject_selection_function()
